## Ruby の do について
以下の様に do を使用することがある。
//////////////////////////////////////////////////
Rails.application.routes.draw do

  get "/articles", to: "articles#index"

end
//////////////////////////////////////////////////

do は end とセットで使用して、その範囲をブロックとする。
そして、rubyではそのブロックをそのままメソッドの引数とすることができる。
今回では、Rails.application.routes.drawメソッドの引数として、do ～ endのブロックが渡されている。
javascriptでいうところのコールバック関数のイメージ

また、コールバック関数と同じ使い方ができるため、以下のようにもできる。
//////////////////////////////////////////////////
arr = [ 1, 2, 3, 4, 5 ]
sum = 0
arr.each do |item|

  sum = sum + item

end
//////////////////////////////////////////////////
eachメソッドの引数にdo以下をブロックごと渡し、|item|として、eachメソッド内の引数も受け取って使用できる。




## メソッドは () 無しでも呼び出せるし引数書いて良い
以下の様に引数がある場合でも()を書かなくて良い。
//////////////////////////////////////////////////
Rails.application.routes.draw do

  get "/articles", to: "articles#index"

end
//////////////////////////////////////////////////
getメソッドを呼び出している。引数として、 "/articles", to: "articles#index" を指定している。




## 引数にある to: "articles#index" こういうの何？
これはハッシュリテラル。
以下ではgetメソッドの第二引数として使用されている。
//////////////////////////////////////////////////
Rails.application.routes.draw do

  get "/articles", to: "articles#index"

end
//////////////////////////////////////////////////
to: "articles#index" これは単純にハッシュのリテラルなので、
{to => "articles#index"} こう書き直せる。
単純に{}を省略した形である。